// Generated by CoffeeScript 1.6.3
(function() {
  var Client, FixtureManager, async, fs, util,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  require('colors');

  async = require('async');

  Client = require('request-json').JsonClient;

  fs = require('fs');

  util = require('util');

  FixtureManager = (function() {
    /*
    # The value of those properties are set through @_resetDefaults
    # or @setDefaultValues()
    */

    FixtureManager.prototype.dirPath = null;

    FixtureManager.prototype.doctypeTarget = null;

    FixtureManager.prototype.selectedDoctypes = null;

    FixtureManager.prototype.silent = null;

    FixtureManager.prototype.callback = null;

    FixtureManager.prototype.removeBeforeLoad = null;

    FixtureManager.prototype.dataSystemUrl = null;

    FixtureManager.prototype.defaultValues = {
      dirPath: './tests/fixtures/',
      doctypeTarget: null,
      selectedDoctypes: null,
      silent: false,
      callback: null,
      removeBeforeLoad: true,
      dataSystemUrl: "http://localhost:9101/"
    };

    function FixtureManager() {
      this._readJSONFile = __bind(this._readJSONFile, this);
      this.onRawFixturesLoad = __bind(this.onRawFixturesLoad, this);
      this._resetDefaults();
      this.client = new Client(this.dataSystemUrl);
    }

    FixtureManager.prototype._resetDefaults = function() {
      this.dirPath = this.defaultValues['dirPath'];
      this.doctypeTarget = this.defaultValues['doctypeTarget'];
      this.selectedDoctypes = this.defaultValues['selectedDoctypes'];
      this.silent = this.defaultValues['silent'];
      this.callback = this.defaultValues['callback'];
      this.removeBeforeLoad = this.defaultValues['removeBeforeLoad'];
      return this.dataSystemUrl = this.defaultValues['dataSystemUrl'];
    };

    FixtureManager.prototype.setDefaultValues = function(opts) {
      var opt, value;
      for (opt in opts) {
        value = opts[opt];
        if (this.defaultValues[opt] != null) {
          this.defaultValues[opt] = value;
        }
      }
      return this._resetDefaults();
    };

    FixtureManager.prototype.load = function(opts) {
      var e, fileList,
        _this = this;
      if ((opts != null ? opts.dirPath : void 0) != null) {
        this.dirPath = opts.dirPath;
      }
      if ((opts != null ? opts.doctypeTarget : void 0) != null) {
        this.doctypeTarget = opts.doctypeTarget.toLowerCase();
      }
      if ((opts != null ? opts.silent : void 0) != null) {
        this.silent = opts.silent;
      }
      if ((opts != null ? opts.dataSystemUrl : void 0) != null) {
        this.dataSystemUrl = opts.dataSystemUrl;
        this.client = new Client(this.dataSystemUrl);
      }
      if ((opts != null ? opts.callback : void 0) != null) {
        this.callback = function(err) {
          _this._resetDefaults();
          return opts.callback();
        };
      } else {
        this.callback = function(err) {
          return _this._resetDefaults();
        };
      }
      if ((opts != null ? opts.removeBeforeLoad : void 0) != null) {
        this.removeBeforeLoad = opts.removeBeforeLoad;
      }
      try {
        if (fs.lstatSync(this.dirPath).isDirectory()) {
          fileList = fs.readdirSync(this.dirPath);
          return async.concat(fileList, this._readJSONFile, this.onRawFixturesLoad);
        } else if (fs.lstatSync(this.dirPath).isFile()) {
          return this._readJSONFile(this.dirPath, this.onRawFixturesLoad, true);
        }
      } catch (_error) {
        e = _error;
        return this.log(("[ERROR] Cannot load fixtures -- " + e).red);
      }
    };

    FixtureManager.prototype.onRawFixturesLoad = function(err, docs) {
      var doc, doctype, doctypeSet, missingDoctypeDoc, msg, requests, skippedDoctypeMissing, _i, _j, _len, _len1,
        _this = this;
      skippedDoctypeMissing = [];
      doctypeSet = {};
      for (_i = 0, _len = docs.length; _i < _len; _i++) {
        doc = docs[_i];
        if (doc.docType != null) {
          doc.docType = doc.docType.toLowerCase();
        }
        if (doc.docType == null) {
          skippedDoctypeMissing.push(doc);
        } else if (((this.doctypeTarget == null) || this.doctypeTarget === "") || this.doctypeTarget === doc.docType) {
          if (doctypeSet[doc.docType] == null) {
            doctypeSet[doc.docType] = [];
          }
          doctypeSet[doc.docType].push(doc);
        }
      }
      if (skippedDoctypeMissing.length > 0) {
        msg = "[WARN] Missing doctype information in " + ("" + skippedDoctypeMissing.length + " documents.");
        this.log(msg.red);
        for (_j = 0, _len1 = skippedDoctypeMissing.length; _j < _len1; _j++) {
          missingDoctypeDoc = skippedDoctypeMissing[_j];
          this.log(util.inspect(missingDoctypeDoc));
        }
      }
      requests = [];
      for (doctype in doctypeSet) {
        docs = doctypeSet[doctype];
        requests.push(this._processAdditionFactory(doctype, docs));
      }
      return async.series(requests, function(err, results) {
        _this.log("[INFO] End of fixtures importation.".blue);
        if (_this.callback != null) {
          return _this.callback();
        }
      });
    };

    FixtureManager.prototype._processAdditionFactory = function(doctypeName, docs, callback) {
      var _this = this;
      return function(callback) {
        var msg;
        msg = ("[INFO] DOCTYPE: " + doctypeName + " - Starting importation ") + ("of " + docs.length + " documents...");
        _this.log(msg.yellow);
        if (_this.removeBeforeLoad) {
          return _this.removeDocumentsOf(doctypeName, function(err) {
            if (err) {
              return callback(err);
            } else {
              return _this._processAddition(docs, callback);
            }
          });
        } else {
          return _this._processAddition(docs, callback);
        }
      };
    };

    FixtureManager.prototype.removeDocumentsOf = function(doctypeNames, callback) {
      var doctypeList, msg,
        _this = this;
      if (typeof doctypeNames === 'string' || doctypeNames instanceof String) {
        doctypeNames = [doctypeNames];
      }
      doctypeList = doctypeNames.join(" ");
      msg = "\t* Removing all documents for doctype(s) " + doctypeList + "...";
      this.log(msg);
      return this.createAllRequestsFor(doctypeNames, function(err) {
        var asyncRequests, doctypeName, factory, _i, _len;
        if (err != null) {
          return callback(err);
        } else {
          factory = function(doctypeName) {
            return function(callback) {
              return _this._removeDocs(doctypeName, function(err) {
                return callback(err);
              });
            };
          };
          asyncRequests = [];
          for (_i = 0, _len = doctypeNames.length; _i < _len; _i++) {
            doctypeName = doctypeNames[_i];
            asyncRequests.push(factory(doctypeName));
          }
          return async.parallel(asyncRequests, function(err) {
            if (err != null) {
              msg = "\t[ERRROR] Couldn't delete all the docs";
              _this.log(("" + msg + " -- " + err).red);
            }
            return callback(err);
          });
        }
      });
    };

    FixtureManager.prototype.createAllRequestsFor = function(doctypeNames, callback) {
      var asyncRequests, doctypeList, doctypeName, factory, msg, _i, _len,
        _this = this;
      if (typeof doctypeNames === 'string' || doctypeNames instanceof String) {
        doctypeNames = [doctypeNames];
      }
      doctypeList = doctypeNames.join(" ");
      msg = "\t\t* Creating 'all' requests for doctype(s) " + doctypeList + "...";
      this.log(msg);
      factory = function(doctypeName) {
        return function(callback) {
          return _this._createAllRequest(doctypeName, callback);
        };
      };
      asyncRequests = [];
      for (_i = 0, _len = doctypeNames.length; _i < _len; _i++) {
        doctypeName = doctypeNames[_i];
        asyncRequests.push(factory(doctypeName));
      }
      return async.parallel(asyncRequests, function(err) {
        if (err != null) {
          msg = "\t\t\t* Something went wrong during request " + ("creation -- " + err);
          _this.log(msg.red);
        } else {
          msg = "\t\t\t-> 'all' requests have been successfully created.";
          _this.log(msg.green);
        }
        return callback(err);
      });
    };

    FixtureManager.prototype._processAddition = function(docs, callback) {
      var asyncRequests, doc, _i, _len,
        _this = this;
      asyncRequests = [];
      for (_i = 0, _len = docs.length; _i < _len; _i++) {
        doc = docs[_i];
        asyncRequests.push(this._addDoc(doc, callback));
      }
      this.log("\t* Adding documents in the Data System...");
      return async.parallel(asyncRequests, function(err, results) {
        var msg;
        if (err != null) {
          msg = "\t\tx One or more documents have not been " + ("added to the Data System -- " + err);
          _this.log(msg.red);
        } else {
          _this.log(("\t\t-> " + results.length + " docs added!").green);
        }
        return callback(null, null);
      });
    };

    FixtureManager.prototype._readJSONFile = function(filename, callback, absolutePath) {
      var errorMsg, filePath,
        _this = this;
      if (absolutePath == null) {
        absolutePath = false;
      }
      if (absolutePath) {
        filePath = filename;
      } else {
        if (this.dirPath[this.dirPath.length - 1] !== '/') {
          this.dirPath = "" + this.dirPath + "/";
        }
        filePath = this.dirPath + filename;
      }
      if (filePath.indexOf('.json') !== -1) {
        return fs.readFile(filePath, function(err, data) {
          var e, msg;
          if (err != null) {
            err = "[ERROR] While reading fixtures files, got " + err;
            _this.log(err.red);
          } else {
            msg = "[INFO] Reading fixtures from " + filePath + "...";
            _this.log(msg.blue);
          }
          try {
            data = JSON.parse(data);
          } catch (_error) {
            e = _error;
            msg = ("[WARN] Skipped " + filePath + " because it contains ") + ("malformed JSON --- " + e);
            data = [];
            _this.log(msg.red);
          }
          return callback(err, data);
        });
      } else {
        errorMsg = ("[WARN] Skipped " + filePath + " because it is not a ") + "JSON file.";
        this.log(errorMsg.red);
        return callback(null, null);
      }
    };

    FixtureManager.prototype._getAllRequest = function(doctypeName) {
      return "function (doc) {\n    if (doc.docType === \"" + doctypeName + "\") {\n        return emit(doc._id, doc);\n    }\n}";
    };

    FixtureManager.prototype._addDoc = function(doc, callback) {
      var _this = this;
      return function(callback) {
        return _this.client.post('data/', doc, function(err, res, body) {
          var statusCode;
          if (err != null) {
            if (res != null) {
              statusCode = "" + statusCode + " - ";
            } else {
              statusCode = "";
            }
            return callback("" + statusCode + err, null);
          } else {
            return callback(null, true);
          }
        });
      };
    };

    FixtureManager.prototype._removeDocs = function(doctypeName, callback) {
      var url;
      url = "request/" + doctypeName + "/all/destroy/";
      return this.client.put(url, {}, function(err, res, body) {
        var statusCode;
        if ((body != null) && (body.error != null)) {
          err = body.error;
        }
        if (err != null) {
          if (res != null) {
            statusCode = "" + statusCode + " - ";
          } else {
            statusCode = "";
          }
          return callback("" + statusCode + err, null);
        } else {
          return callback(null, true);
        }
      });
    };

    FixtureManager.prototype._createAllRequest = function(doctypeName, callback) {
      var all,
        _this = this;
      all = {
        map: this._getAllRequest(doctypeName)
      };
      return this.client.put("request/" + doctypeName + "/all/", all, function(err, res, body) {
        if (err != null) {
          _this.log(("Error occurred during  -- " + err).red);
        }
        return callback(err);
      });
    };

    FixtureManager.prototype.resetDatabase = function(opts) {
      var callback, removeAllViews,
        _this = this;
      if ((opts != null ? opts.silent : void 0) != null) {
        this.silent = opts.silent;
      }
      if ((opts != null ? opts.callback : void 0) != null) {
        callback = opts.callback;
      }
      if ((opts != null ? opts.removeAllViews : void 0) != null) {
        removeAllViews = opts.removeAllViews;
      } else {
        removeAllViews = false;
      }
      return this.client.get('doctypes', function(err, res, body) {
        var msg;
        msg = "[INFO] Removing all document from the database...";
        _this.log(msg.yellow);
        return _this.removeDocumentsOf(body, function() {
          if (err == null) {
            _this.log("\tAll documents have been removed.".green);
          }
          if (removeAllViews) {
            return _this.removeEveryViews({
              callback: function(err) {
                _this._resetDefaults();
                if (callback != null) {
                  return callback(err);
                }
              }
            });
          } else {
            _this._resetDefaults();
            if (callback != null) {
              return callback(err);
            }
          }
        });
      });
    };

    FixtureManager.prototype.removeEveryViews = function(opts) {
      var callback, designList, designsToRemove, url,
        _this = this;
      if ((opts != null ? opts.callback : void 0) != null) {
        callback = opts.callback;
      }
      if ((opts != null ? opts.designsToRemove : void 0) != null) {
        designsToRemove = opts.designsToRemove;
      } else {
        designsToRemove = [];
      }
      if (designsToRemove.length > 0) {
        designList = "design " + designsToRemove.join(" ");
      } else {
        designList = "all the designs";
      }
      this.log(("[INFO] Removing views for " + designList + "...").yellow);
      designsToRemove = designsToRemove.map(function(single) {
        return "_design/" + single;
      });
      this.clientCouch = new Client("http://localhost:5984/");
      url = 'cozy/_all_docs?startkey="_design/"&endkey="_design0"' + '&include_docs=true';
      return this.clientCouch.get(url, function(err, res, body) {
        var asyncRequests, deleteFactory, mustRemove, requiredDesignDocs, row, _i, _len, _ref, _ref1, _ref2;
        deleteFactory = function(id, rev) {
          return function(callback) {
            return _this.clientCouch.del("cozy/" + id + "?rev=" + rev, function(err, res, body) {
              return callback(err, body);
            });
          };
        };
        requiredDesignDocs = ['_design/doctypes'];
        asyncRequests = [];
        _ref = body.rows;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          row = _ref[_i];
          mustRemove = (designsToRemove.length === 0 || (_ref1 = row.key, __indexOf.call(designsToRemove, _ref1) >= 0)) && (_ref2 = !row.key, __indexOf.call(requiredDesignDocs, _ref2) >= 0);
          if (mustRemove) {
            asyncRequests.push(deleteFactory(row.id, row.value.rev));
          }
        }
        return async.parallel(asyncRequests, function(err) {
          var msg;
          if (err != null) {
            msg = "\tx An error occurred while removing the designs.";
            _this.log(("" + msg + " -- " + err).red);
          } else {
            _this.log("\t -> The views have been successfully removed.".green);
          }
          if (callback != null) {
            return callback(err);
          }
        });
      });
    };

    FixtureManager.prototype.log = function() {
      if (!this.silent) {
        return console.log.apply(console, arguments);
      }
    };

    return FixtureManager;

  })();

  module.exports = new FixtureManager();

}).call(this);
