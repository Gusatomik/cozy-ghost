// Generated by CoffeeScript 1.8.0
(function() {
  var LaterStream, drainStream,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  drainStream = function(stream, cb) {
    var body;
    body = '';
    stream.on('data', function(chunk) {
      if (cb) {
        return body += chunk;
      }
    });
    return stream.on('end', function() {
      return typeof cb === "function" ? cb(body) : void 0;
    });
  };

  module.exports = LaterStream = (function() {
    function LaterStream(callback) {
      this.callback = callback;
      this.onReadableReady = __bind(this.onReadableReady, this);
      this.pipe = __bind(this.pipe, this);
      this.abort = __bind(this.abort, this);
      this._onStreamingDone = __bind(this._onStreamingDone, this);
      this.pipeDests = [];
      this.aborted = false;
      this.trueStream = null;
    }

    LaterStream.prototype._onStreamingDone = function(err) {
      if (!this.callbackCalled) {
        return this.callback(err);
      }
    };

    LaterStream.prototype.abort = function() {
      if (this.trueStream) {
        return this.trueStream.req.abort();
      } else {
        return this.aborted = true;
      }
    };

    LaterStream.prototype.pipe = function(dest) {
      if (this.trueStream) {
        if (typeof this.pipefilter === "function") {
          this.pipefilter(this.trueStream, dest);
        }
        return this.trueStream.pipe(dest);
      } else {
        return this.pipeDests.push(dest);
      }
    };

    LaterStream.prototype.onReadableReady = function(error, stream) {
      var dest, _i, _len, _ref, _results;
      if (error) {
        drainStream(stream);
        return this._onStreamingDone(error);
      } else if ((stream != null ? stream.statusCode : void 0) !== 200) {
        return drainStream(stream, (function(_this) {
          return function(body) {
            error = new Error("Error code " + (stream != null ? stream.statusCode : void 0) + " - " + body);
            error.status = (stream != null ? stream.statusCode : void 0) || 500;
            return _this._onStreamingDone(error);
          };
        })(this));
      } else if (this.aborted) {
        stream.req.abort();
        return drainStream(stream);
      } else {
        this.trueStream = stream;
        this.trueStream.on('error', this._onStreamingDone);
        this.trueStream.on('end', this._onStreamingDone);
        _ref = this.pipeDests;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          dest = _ref[_i];
          if (typeof this.pipefilter === "function") {
            this.pipefilter(this.trueStream, dest);
          }
          _results.push(this.trueStream.pipe(dest));
        }
        return _results;
      }
    };

    return LaterStream;

  })();

}).call(this);
